I"º<p>I was recently pondering an alternative to frontend testing, which I find to be very clunky today.</p>

<p>Typically the way frontend testing works is:</p>

<ol>
  <li>A headless browser is launched</li>
  <li>The browser loads up separate files with instructions on where to navigate or click and which tests to run</li>
  <li>The test returns the results.</li>
</ol>

<p>My alternative is</p>

<ol>
  <li>Tests are written directly in the code, and are <em>always</em> run, even in production with actual users.
Essentially, this turns testing into browser monitoring as well.</li>
  <li>The headless browser doesnâ€™t read any tests. It just navigates through different websites and clicks on various things.</li>
  <li>Instead of outputting the results of a text file, it simply outputs the JavaScript console.</li>
</ol>

<h1 id="an-example-of-this-implementation">An example of this implementation:</h1>

<p>Say you had a button that will pull down the number of members from a database.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>myButton.addEventListener('click', () =&gt; {
  getData('/members', () =&gt; {
    alert("Data retrieved.");
  });
});

var getData = (url, cb) =&gt; {
  req = new XMLHttpRequest();
  req.open('GET', url, true);
  req.onload = () =&gt; {
    cb();
  };
  req.send();
}
</code></pre></div></div>

<p>We can add a test to this</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>myButton.addEventListener('click', () =&gt; {

  testRunner.specs.getMembersSpec = testRunner.assert("Data is returned in less than 1 second", 1000);

  getData('/members', () =&gt; {
    alert("Data retrieved.");
  });
});

var getData = (url, cb) =&gt; {
  req = new XMLHttpRequest();
  req.open('GET', url, true);
  req.onload = () =&gt; {
    
    testRunner.specs.getMembersSpec(true);

    cb();
  };
  req.send();
}
</code></pre></div></div>

<p>Or maybe we want to make sure a certain number of members are returned each time.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>myButton.addEventListener('click', () =&gt; {
  testRunner.specs.getMembersSpec = [
    testRunner.assert("Data is returned in less than 1 second", 1000),

    testRunner.expect(
      "Data is returned in less than 1 second", 
      (members) =&gt; {
        members &gt; 1;
      }
    )

  ];

  getData('/members', () =&gt; {
    alert("Data retrieved.");
  });
});

var getData = (url, cb) =&gt; {
  req = new XMLHttpRequest();
  req.open('GET', url, true);
  req.onload = () =&gt; {
    var data = JSON.parse(response);

    testRunner.specs.getMembersSpec([true, [data.members]]);

    cb();
  };
  req.send();
}
</code></pre></div></div>

<p>We can both run a test via the command line to see the output of these test, but we also have the ability to 
see alerts via a reporting system like Mixpanel or Airbrake when the app is not working as weâ€™d expect for a user.</p>
:ET